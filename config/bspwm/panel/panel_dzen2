#! /bin/sh
#
# Example panel for dzen2
#set -x

font_family='sans-serif'
font_size=11

. ./panel_colors

#screen_width=$(sres -W)
NORMIFS=$IFS
FIELDIFS=':'
PADDING='  '

while getopts 'f:s:w:' opt ; do
    case "$opt" in
        f)
            font_family=$OPTARG
            ;;
        s)
            font_size=$OPTARG
            ;;
        w)
            screen_width=$OPTARG
            ;;
    esac
done

shift $((OPTIND - 1))

while read -r line ; do
    # reset monitor value for each update to add padding only before the second one
    monitor=
    case $line in
        S*)
            # clock output
            sys_infos="^fg($COLOR_STATUS_FG)^bg($COLOR_STATUS_BG)${PADDING}${line#?}${PADDING}^fg()^bg()${PADDING}"
            ;;
        P*)
            #pacman info
       #     update_command="urxvtc -name pacup -e bash -c \"pacman -Qu ; sudo pacman -Syu ; echo -e \\\"================\nDone with exit code $?. Press ENTER to continue...\n================\\\" ; read\""
       #     pacman_info="^fg($COLOR_STATUS_FG)^bg($COLOR_STATUS_BG)${PADDING}^ca(1, $update_command )${line#?}^ca()${PADDING}^fg()^bg()"
            ;;
        T*)
            # xtitle output
            title="^fg($COLOR_TITLE_FG)^bg($COLOR_TITLE_BG)${PADDING}${line#?}${PADDING}^fg()^bg()"
            ;;
        W*)
            # bspwm internal state
            wm_infos="$PADDING"
            IFS=$FIELDIFS
            set -- ${line#?}
            while [ $# -gt 0 ] ; do
                item=$1
                case $item in
                    [mM]*)
                        if [ -z $monitor ]; then
                            # first monitor, no additional padding
                            pad=""
                        else
                            pad=$PADDING
                        fi
                        monitor=${item#?}
                        case $item in
                            M*)
                                FG=$COLOR_FOCUSED_MONITOR_FG
                                square="^r(3x10)"
                                ;;
                            m*)
                                FG=$COLOR_MONITOR_FG
                                square="^ro(3x10)"
                                ;;
                        esac
                        wm_infos="${wm_infos}^fg(${FG})^ca(1, bspc monitor -f $monitor)$pad${square} ${monitor}: ^ca()^fg()"
                        ;;
                    [OoFfUu]*)
                        # desktops
                        name=${item#?}
                        focus=${name}
                        case $item in
                            O*)
                                # focused occupied desktop
                                FG=$COLOR_FOCUSED_OCCUPIED_FG
                                BG=$COLOR_FOCUSED_OCCUPIED_BG
                                # if we clicked on an already focused window - focuse the last one instead
                                #echo "name: $(bspc query -D -d $name)"
                                #echo "focused: $(bspc query -D -d focused)"
                                if [ "$(bspc query -D -d $name)" == "$(bspc query -D -d focused)" ]; then 
                                    focus="last"
                                fi
                                ;;
                            F*)
                                # focused free desktop
                                FG=$COLOR_FOCUSED_FREE_FG
                                BG=$COLOR_FOCUSED_FREE_BG
                                ;;
                            U*)
                                # focused urgent desktop
                                FG=$COLOR_FOCUSED_URGENT_FG
                                BG=$COLOR_FOCUSED_URGENT_BG
                                ;;
                            o*)
                                # occupied desktop
                                FG=$COLOR_OCCUPIED_FG
                                BG=$COLOR_OCCUPIED_BG
                                ;;
                            f*)
                                # free desktop
                                FG=$COLOR_FREE_FG
                                BG=$COLOR_FREE_BG
                                ;;
                            u*)
                                # urgent desktop
                                FG=$COLOR_URGENT_FG
                                BG=$COLOR_URGENT_BG
                                ;;
                        esac
                        wm_infos="${wm_infos}^fg(${FG})^bg(${BG})^ca(1, bspc desktop -f ${focus})${PADDING}${name}${PADDING}^ca()^ca()^bg()^fg()"
                        ;;
                esac
                shift
            done
            IFS=$NORMIFS
            ;;
    esac
#    echo "wm_infos: $wm_infos"
#    echo "title: $title"
#    echo "sys_infos: $sys_infos"
    set -- $(printf '%s\0%s\0%s' "$wm_infos" "$title" "$sys_infos" | sed 's/\^[a-z]\+([^)]*)//g' | xargs -0 txtw -f "$font_family" -s "$font_size")
    left_width=$1
    center_width=$2
    right_width=$3
    additional_right_width=$(echo "$pacman_info" | sed 's/\^[a-z]\+([^)]*)//g' | xargs -0 txtw -f "$font_family" -s "$font_size")
    right_width=$(($right_width + $additional_right_width))
    left_indent=0
    right_indent=$((screen_width - right_width))
    available_center=$((screen_width - (left_width + right_width)))
    if [ $available_center -lt $center_width ] ; then
        center_indent=$left_width
    else
        max_left_right_width=$left_width
        [ $left_width -lt $right_width ] && max_left_right_width=$right_width
        if [ $((2 * max_left_right_width + center_width)) -gt $screen_width ] ; then
            center_indent=$((left_width + (available_center - center_width) / 2))
        else
            center_indent=$(((screen_width - center_width) / 2))
        fi
    fi
    printf "%s\n" "^pa($center_indent)$title^pa($left_indent)$wm_infos^pa($right_indent)$pacman_info$sys_infos"
done
